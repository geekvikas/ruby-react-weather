{"ast":null,"code":"var _jsxFileName = \"/Users/vikas/dev/interviews/onesignal/ruby-react-weather/app/javascript/components/Weather.jsx\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\nexport default function Weather() {\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      weather = _useState2[0],\n      setWeather = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1];\n\n  useEffect(function () {\n    var geo = navigator.geolocation;\n\n    if (!geo) {\n      setError(\"Geolocation is not supported\");\n      return;\n    }\n\n    var watcher = geo.watchPosition(onChange, onError);\n    return function () {\n      return geo.clearWatch(watcher);\n    };\n  }, []);\n\n  var onChange = function onChange(_ref) {\n    var coords = _ref.coords;\n\n    if (coords) {\n      var lat = coords.latitude;\n      var lon = coords.longitude;\n      var apiUrl = \"https://api.openweathermap.org/data/2.5/weather?lat=\".concat(lat, \"&lon=\").concat(lon, \"&appid=f513eb8ca9bc54afc9773da7aeaaa41f\");\n      fetch(apiUrl).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        setWeather(data);\n        console.log(data);\n      });\n    }\n  };\n\n  var onError = function onError(error) {\n    setError(error.message);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, \"Weather App\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"location\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 4\n    }\n  }, \"Location:\", \" \", error ? error : /*#__PURE__*/React.createElement(CircularProgress, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 26\n    }\n  }) && weather.name));\n}","map":{"version":3,"sources":["/Users/vikas/dev/interviews/onesignal/ruby-react-weather/app/javascript/components/Weather.jsx"],"names":["React","useState","useEffect","Link","CircularProgress","Weather","weather","setWeather","error","setError","geo","navigator","geolocation","watcher","watchPosition","onChange","onError","clearWatch","coords","lat","latitude","lon","longitude","apiUrl","fetch","then","response","json","data","console","log","message","name"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AAEA,eAAe,SAASC,OAAT,GAAmB;AAAA,kBACFJ,QAAQ,CAAC,EAAD,CADN;AAAA;AAAA,MACzBK,OADyB;AAAA,MAChBC,UADgB;;AAAA,mBAENN,QAAQ,CAAC,IAAD,CAFF;AAAA;AAAA,MAEzBO,KAFyB;AAAA,MAElBC,QAFkB;;AAIhCP,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMQ,GAAG,GAAGC,SAAS,CAACC,WAAtB;;AACA,QAAI,CAACF,GAAL,EAAU;AACRD,MAAAA,QAAQ,CAAC,8BAAD,CAAR;AACA;AACD;;AACD,QAAMI,OAAO,GAAGH,GAAG,CAACI,aAAJ,CAAkBC,QAAlB,EAA4BC,OAA5B,CAAhB;AACA,WAAO;AAAA,aAAMN,GAAG,CAACO,UAAJ,CAAeJ,OAAf,CAAN;AAAA,KAAP;AACD,GARQ,EAQN,EARM,CAAT;;AAUA,MAAME,QAAQ,GAAG,SAAXA,QAAW,OAAgB;AAAA,QAAbG,MAAa,QAAbA,MAAa;;AAC/B,QAAIA,MAAJ,EAAY;AACV,UAAMC,GAAG,GAAGD,MAAM,CAACE,QAAnB;AACA,UAAMC,GAAG,GAAGH,MAAM,CAACI,SAAnB;AAEA,UAAMC,MAAM,iEAA0DJ,GAA1D,kBAAqEE,GAArE,4CAAZ;AAEAG,MAAAA,KAAK,CAACD,MAAD,CAAL,CACGE,IADH,CACQ,UAACC,QAAD;AAAA,eAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,OADR,EAEGF,IAFH,CAEQ,UAACG,IAAD,EAAU;AACdrB,QAAAA,UAAU,CAACqB,IAAD,CAAV;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACD,OALH;AAMD;AACF,GAdD;;AAgBA,MAAMZ,OAAO,GAAG,SAAVA,OAAU,CAACR,KAAD,EAAW;AACzBC,IAAAA,QAAQ,CAACD,KAAK,CAACuB,OAAP,CAAR;AACD,GAFD;;AAIA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,eAED;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACe,GADf,EAEMvB,KAAK,GAAGA,KAAH,GAAW,iCAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAwBF,OAAO,CAAC0B,IAFtD,CAFC,CADF;AASD","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nexport default function Weather() {\n  const [weather, setWeather] = useState({});\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const geo = navigator.geolocation;\n    if (!geo) {\n      setError(\"Geolocation is not supported\");\n      return;\n    }\n    const watcher = geo.watchPosition(onChange, onError);\n    return () => geo.clearWatch(watcher);\n  }, []);\n\n  const onChange = ({ coords }) => {\n    if (coords) {\n      const lat = coords.latitude;\n      const lon = coords.longitude;\n\n      const apiUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=f513eb8ca9bc54afc9773da7aeaaa41f`;\n\n      fetch(apiUrl)\n        .then((response) => response.json())\n        .then((data) => {\n          setWeather(data);\n          console.log(data);\n        });\n    }\n  };\n\n  const onError = (error) => {\n    setError(error.message);\n  };\n\n  return (\n    <div>\n      <div className=\"title\">Weather App</div>\n\t\t\t<div className=\"location\">\n        Location:{\" \"}\n        {error ? error : <CircularProgress/> &&  weather.name }\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}